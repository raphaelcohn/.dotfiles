#!/usr/bin/env sh
# This file is part of .dotfiles. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/.dotfiles/master/COPYRIGHT. No part of .dotfiles, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of .dotfiles. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/.dotfiles/master/COPYRIGHT.


set -e
set -u
set -f

_program_path_find()
{
    if [ "${_program_fattening_program_path+set}" = 'set' ]; then
        printf '%s\n' "$_program_fattening_program_path"

    elif [ "${0%/*}" = "$0" ]; then

        # We've been invoked by the interpreter as, say, bash program
        if [ -r "$0" ]; then
            pwd -P
        # Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
        else
            printf '\n'
        fi

    else

        # We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

        _program_path_find_parentPath()
        {
            parentPath="${scriptPath%/*}"
            if [ -z "$parentPath" ]; then
                parentPath='/'
            fi
            cd "$parentPath" 1>/dev/null
        }

        # pdksh / mksh have problems with unsetting a variable that was never set...
        if [ "${CDPATH+set}" = 'set' ]; then
            unset CDPATH
        fi

        if command -v realpath 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$(realpath "$0")"

                _program_path_find_parentPath
                pwd -P
            )
        elif command -v readlink 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$0"

                while [ -L "$scriptPath" ]
                do
                    _program_path_find_parentPath
                    scriptPath="$(readlink "$scriptPath")"
                done

                _program_path_find_parentPath
                pwd -P
            )
        else
            # This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
            (
                scriptPath="$0"

                _program_path_find_parentPath
                pwd -P
            )
        fi

    fi
}

install_main()
{
	local _program_path="$(_program_path_find)"
	
	local platform="$(uname)"
	
	local platformPath="$_program_path"/"$platform"
	if [ ! -d "$platformPath" ]; then
		printf '%s\n' "Platform '$platform' is not yet supported" 1>&2
		exit 1
	fi
	
	local eventualExitCode=0
	cd "$platformPath" 1>/dev/null 2>/dev/null
		
		set +f
		local fileToInstall
		for fileToInstall in .*
		do
			set -f
			if [ ! -r "$fileToInstall" ]; then
				continue
			fi
			
			case "$fileToInstall" in
				
				.|..)
					continue
				;;
				
			esac
			
			set +e
				rm -rf ~/"$fileToInstall"
				if [ $? -ne 0 ]; then
					printf '%s\n' "Could not remove existing file '~/$fileToInstall'" 1>&2
					eventualExitCode=1
				else
					ln -s "$platformPath"/"$fileToInstall" ~/"$fileToInstall"
					if [ $? -ne 0 ]; then
						printf '%s\n' "Could not link file '~/$fileToInstall'" 1>&2
						eventualExitCode=1
					else
						printf '%s\n' "Installed dotfile '~/$fileToInstall'" 1>&2
					fi
				fi
			set -e
		done
		set -f
		
	cd - 1>/dev/null 2>/dev/null
	
	exit $eventualExitCode
}

install_main "$@"
